from importlib import reload

from hwt.interfaces.std import Signal
from hwt.synthesizer.unit import Unit
from hwt.hdl.types.enum import HEnum
from hwt.code import power, If, Concat
from hwt.synthesizer.param import Param

{% for c in componentInstances %}
if "{{c.name}}" not in locals(): # support for all models in single file
    import {{c.name}}
    reload({{c.name}})
    from {{c.name}} import {{c.name}}{% endfor %}
{% for imp in imports %}
{{imp}}
{% endfor %}

class {{ name }}(Unit):
    {% if config %}
    def _config(self):{% for cname, cval in config %}
        self.{{cname}} = Param({{cval}}){% endfor %}{% endif %}
    
    def _declr(self):{% for name, dtype in ports %}
        self.{{name}} = Signal({{dtype}}){% endfor %}
		{% for c in componentInstances %}
        # connect ports{% for p in c.ports %}
        connectSimPort(self, {{c.name}},"{{p.src.name}}", "{{p.dst.name}}", {{p.direction}}){% endfor %}
        self.{{c._name}} = {{c.name}}()
        {% endfor %}
		

    
    def _impl(self):
		# internal signals{% for name, dtype, defVal in signals %}
		{{name}} = self._sig("{{name}}", {{dtype}}, defaultVal={{defVal}}){% endfor %}
    
	{% for proc in processes %}
{{proc}}
	{% endfor %}
    
    def __init__(self):
        self._interfaces = [{% for name, _ in ports   %}self.{{name}},
                            {% endfor %}{% for name, _, _ in signals %}self.{{name}},
                            {% endfor %}]
        self._processes = [{% for procName in processesNames %}self.{{procName}},
                           {% endfor %}]
        
        self._units = [{% for c in componentInstances %}self.{{c._name}},
                       {% endfor %}]

        self._outputs = {}
        {% for proc in processObjects %}
        sensitivity(self.{{proc.name}}, {% 
            for s in proc.sensitivityList %}{% 
                if isOp(s) %}({{ sensitivityByOp(s.operator) }}, self.{{s.operands[0].name}}){% 
                else %}self.{{s.name}}{%
                endif %}{% 
                if not loop.last %}, {% 
                endif %}{% 
            endfor %})
        self._outputs[self.{{proc.name}}] = ({% for outp in proc.outputs %}
                ("{{outp.name}}", self.{{ serialize_io(outp) }}),{% endfor %}){% 
        endfor %}
