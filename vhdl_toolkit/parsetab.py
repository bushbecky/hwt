
# /home/nic30/Documents/workspace/hw_synthesis/hw_synthesis_helpers/vhdl_toolkit/parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '9195A5F7E05E627AC0F404F95AEB41BA'
    
_lr_action_items = {'*':([3,5,6,7,8,9,15,16,17,18,19,20,],[-10,-9,12,-10,12,-7,-8,12,12,-5,-6,12,]),'$end':([3,4,5,6,7,9,15,16,17,18,19,20,],[-10,0,-9,-2,-10,-7,-8,-1,-4,-5,-6,-3,]),'(':([0,1,2,10,11,12,13,14,],[1,1,1,1,1,1,1,1,]),'+':([3,5,6,7,8,9,15,16,17,18,19,20,],[-10,-9,14,-10,14,-7,-8,14,-4,-5,-6,-3,]),')':([5,7,8,9,15,17,18,19,20,],[-9,-10,15,-7,-8,-4,-5,-6,-3,]),'-':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,],[2,2,2,-10,-9,11,-10,11,-7,2,2,2,2,2,-8,11,-4,-5,-6,-3,]),'NAME':([0,1,2,10,11,12,13,14,],[3,7,7,7,7,7,7,7,]),'/':([3,5,6,7,8,9,15,16,17,18,19,20,],[-10,-9,13,-10,13,-7,-8,13,13,-5,-6,13,]),'NUMBER':([0,1,2,10,11,12,13,14,],[5,5,5,5,5,5,5,5,]),'=':([3,],[10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[4,]),'expression':([0,1,2,10,11,12,13,14,],[6,8,9,16,17,18,19,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','valueInterpret.py',50),
  ('statement -> expression','statement',1,'p_statement_expr','valueInterpret.py',54),
  ('expression -> expression + expression','expression',3,'p_expression_binop','valueInterpret.py',59),
  ('expression -> expression - expression','expression',3,'p_expression_binop','valueInterpret.py',60),
  ('expression -> expression * expression','expression',3,'p_expression_binop','valueInterpret.py',61),
  ('expression -> expression / expression','expression',3,'p_expression_binop','valueInterpret.py',62),
  ('expression -> - expression','expression',2,'p_expression_uminus','valueInterpret.py',69),
  ('expression -> ( expression )','expression',3,'p_expression_group','valueInterpret.py',73),
  ('expression -> NUMBER','expression',1,'p_expression_number','valueInterpret.py',77),
  ('expression -> NAME','expression',1,'p_expression_name','valueInterpret.py',81),
]
