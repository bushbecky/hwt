-- File: ft245ToAxi/ft245ToAxi.vhd
-- Generated by MyHDL 0.9.0
-- Date: Thu Mar 31 13:12:41 2016


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_090.all;

entity ft245ToAxi is
    port (
        clk: in std_logic;
        rst: in std_logic;
        ft245sIf_dataIn: in std_logic_vector(7 downto 0);
        ft245sIf_dataOut: in std_logic_vector(7 downto 0);
        ft245sIf_strobe: in std_logic;
        ft245sIf_busy: in std_logic;
        ft245sIf_rw: in std_logic;
        axiB_valid: in std_logic;
        axiB_resp: in std_logic_vector(1 downto 0);
        axiB_ready: in std_logic;
        axiAw_valid: in std_logic;
        axiAw_ready: in std_logic;
        axiAw_addr: in std_logic_vector(31 downto 0);
        axiR_resp: in std_logic_vector(1 downto 0);
        axiR_data: in std_logic_vector(63 downto 0);
        axiR_valid: in std_logic;
        axiR_ready: in std_logic;
        axiAr_valid: in std_logic;
        axiAr_ready: in std_logic;
        axiAr_addr: in std_logic_vector(31 downto 0);
        axiW_data: in std_logic_vector(63 downto 0);
        axiW_valid: in std_logic;
        axiW_ready: in std_logic;
        axiW_strb: in std_logic_vector(7 downto 0)
    );
end entity ft245ToAxi;


architecture MyHDL of ft245ToAxi is


constant LEN_W: integer := 7;


type t_enum_t_stPackReader_1 is (
    RD_LEN,
    RD_ADDR,
    RD_DATA,
    SUSPENDED
);

signal lenRem: unsigned(6 downto 0);
signal ft245sIf_dataIn_num: unsigned(7 downto 0);
signal len: unsigned(6 downto 0);
signal addr: unsigned(31 downto 0);
signal addr_next: unsigned(31 downto 0);
signal addrLdIndexer: unsigned(3 downto 0);
signal addrLdIndexer_next: unsigned(3 downto 0);
signal newPacket: std_logic;
signal pReaderSt: t_enum_t_stPackReader_1;
signal rw_next: std_logic;
signal len_next: unsigned(6 downto 0);
signal pReaderSt_next: t_enum_t_stPackReader_1;
signal rw: std_logic;

begin

ft245sIf_dataIn_num <= unsigned(ft245sIf_dataIn);
ft245sIf_dataOut_num <= unsigned(ft245sIf_dataOut);
axiB_resp_num <= unsigned(axiB_resp);
axiAw_addr_num <= unsigned(axiAw_addr);
axiR_resp_num <= unsigned(axiR_resp);
axiR_data_num <= unsigned(axiR_data);
axiAr_addr_num <= unsigned(axiAr_addr);
axiW_data_num <= unsigned(axiW_data);
axiW_strb_num <= unsigned(axiW_strb);

lenRem <= to_unsigned(0, 7);
addrLdIndexer <= to_unsigned(0, 4);
newPacket <= '0';



FT245TOAXI_PACKETLOADER: process (ft245sIf_dataIn_num, len, addr, addrLdIndexer, pReaderSt, rw) is
begin
    rw_next <= rw;
    len_next <= len;
    addr_next <= addr;
    case pReaderSt is
        when RD_LEN =>
            rw_next <= ft245sIf_dataIn_num(LEN_W);
            len_next <= resize(ft245sIf_dataIn_num, 7);
        when RD_ADDR =>
            addr_next(to_integer(addrLdIndexer * 8)-1 downto 8) <= resize(ft245sIf_dataIn_num, -8);
        when RD_DATA =>
            null;
        when others =>
            null;
    end case;
end process FT245TOAXI_PACKETLOADER;


FT245TOAXI_ADDRLDINDEXER_INCREMENTER: process (clk) is
begin
    if rising_edge(clk) then
        if (rst = '0') then
            addrLdIndexer_next <= to_unsigned(0, 4);
        else
            case pReaderSt is
                when RD_LEN =>
                    addrLdIndexer_next <= to_unsigned(0, 4);
                when RD_ADDR =>
                    if (not bool(ft245sIf_busy)) then
                        addrLdIndexer_next <= (addrLdIndexer + 1);
                    end if;
                when others =>
                    addrLdIndexer_next <= addrLdIndexer;
            end case;
        end if;
    end if;
end process FT245TOAXI_ADDRLDINDEXER_INCREMENTER;


FT245TOAXI_PACKETLOADERSTATECHANGE: process (lenRem, ft245sIf_busy, addrLdIndexer, pReaderSt, newPacket) is
begin
    pReaderSt_next <= pReaderSt;
    if (not bool(ft245sIf_busy)) then
        case pReaderSt is
            when RD_LEN =>
                pReaderSt_next <= RD_ADDR;
            when RD_ADDR =>
                if (addrLdIndexer = 3) then
                    pReaderSt_next <= RD_DATA;
                end if;
            when RD_DATA =>
                if (lenRem = 0) then
                    pReaderSt_next <= SUSPENDED;
                end if;
            when others => -- SUSPENDED
                if bool(newPacket) then
                    pReaderSt_next <= RD_LEN;
                end if;
        end case;
    end if;
end process FT245TOAXI_PACKETLOADERSTATECHANGE;


FT245TOAXI_STATESHIFT: process (clk) is
begin
    if rising_edge(clk) then
        if (rst = '0') then
            addr <= to_unsigned(0, 32);
            len <= to_unsigned(0, 7);
            rw <= '0';
            pReaderSt <= RD_LEN;
        else
            pReaderSt <= pReaderSt_next;
            rw <= rw_next;
            len <= len_next;
            addr <= addr_next;
        end if;
    end if;
end process FT245TOAXI_STATESHIFT;

end architecture MyHDL;
